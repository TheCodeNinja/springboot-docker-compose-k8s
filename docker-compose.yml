version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: springboot-app
    labels:
      com.docker.compose.service: app
    ports:
      - "8080:8080" # Maps port 8080 on the host to port 8080 inside the container
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/myapp
#      - SPRING_DATASOURCE_USERNAME=postgres
#      - SPRING_DATASOURCE_PASSWORD=postgres
    logging:
      driver: "json-file"
      options:
        max-size: "10m" # 10 MB
        max-file: "3"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=myapp
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true # Prevents memory swapping for better performance
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # Limits Java heap memory to 512 MB for efficient resource usage.
      - xpack.security.enabled=false # Disables security features for development (e.g., no authentication)
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q 'status.*green\\|status.*yellow'" ]
      interval: 20s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - app-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: filebeat
    user: root
    privileged: true
    volumes:
      - ./docker/filebeat/config:/usr/share/filebeat/config
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: ["filebeat", "-c", "/usr/share/filebeat/config/filebeat.yml", "-e"]
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "filebeat test config && filebeat test output" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/config:/etc/prometheus/config
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/config/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - app-network

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data: